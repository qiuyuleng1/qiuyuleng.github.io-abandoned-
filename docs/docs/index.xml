<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on My CS Learning</title>
    <link>http://example.org/docs/</link>
    <description>Recent content in Docs on My CS Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ansible</title>
      <link>http://example.org/docs/stage1/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/ansible/</guid>
      <description>Inventory file alias(别名)
ansible_host=IP/FQDN(fully qualified domain name, 完整域名)
ansible_connection=ssh/winrm/localhost
ansible_port=22(default for ssh)
ansible_user=root/administrator
ansible_ssh_pass(ansible_password for win)=password
[group_name1]
Groupmember_alias1 or host
[group_name2]
Groupmember_alias2 or host
[group_name3:children] 继承
group_name1
group_name2
YMAL Key :(colon) value
冒号后面一定要加空格！</description>
    </item>
    
    <item>
      <title>Docker in Action</title>
      <link>http://example.org/docs/stage2/docker-in-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/docker-in-action/</guid>
      <description>Introduction Chapter 1: Welcome to Docker Docker make it easier for users to install and run the software. Docker is a tool helping solve common problems such as installing, removing, upgrading, distributing, trusting and running software, helping system administrators focus on higher-value activities. What is Docker? Docker is an open source project for building, shipping and running programs. containers Install Docker https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository Take care of the setting of proxy https://docs.docker.com/config/daemon/systemd/#httphttps-proxy https://docs.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://example.org/docs/stage1/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/git/</guid>
      <description>git reset
git reverse
git rebase
git rebase main
当前在bugFix这个branch，把当前的branch copy到main branch
git rebase a b
将b复制到a下
git rebase bugFix
git rebase bugFix main
git pull &amp;ndash;rebase
git push origin main (git push )
git push origin &amp;lt;source本地&amp;gt;:&amp;lt;destination远&amp;gt;
如果是空的，例如 git push origin :foo ，那就是删除foo on remote
git fetch 和 git pull的区别？git pull = git fetch + merge
git fetch origin &amp;lt;source远&amp;gt;:&amp;lt;destination本地&amp;gt;
如果是空的，例如git fetch origin :bar, 那就是新建bar 分支</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://example.org/docs/stage2/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/go/</guid>
      <description>Set up GO Environment Install a secondary Go environment
go get golang.org/dl/go.1.15.6 go1.15.6 download go1.15.6 build Remove the secondary Go environment
go1.15.6 env GOROOT rm -rf $(go1.15.6 env GOROOT) rm $(go env GOPATH)/bin/go1.15.6 Primitive Types and Declarations Build-in Types booolenas, integers, floats, strings
Zero value default zero value to any variable that is declared but not assigned a values.
Literals 0b binary
0o octal (eight)
0x hexadecimal (sixteen)
For longer integer literals, use underscores to improve readability 1_234</description>
    </item>
    
    <item>
      <title>K8s in Action</title>
      <link>http://example.org/docs/stage2/k8s-in-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/k8s-in-action/</guid>
      <description>第一章：Kubernetes 介绍
Kubernetes 通过对实际硬件做抽象，然后将自身暴露成一个平台，用于部署和运行应用程序。它允许开发者自己配置和部署应用程序，而不需要系统管理员的帮助，让开发者聚焦于保持底层基础设施运转正常的同时，不需要关注实际运行在平台上的应用程序。
K8s系统由一个主节点和若干个工作节点组成。开发者把一个应用列表提交到主节点，k8s会把它们部署到集群的工作节点。组件被具体部署在哪个节点对于开发者和系统管理员来说都不用关心。
第二章：开始使用K8S和Docker
kubectl cluster-info 展示集群信息
kubectl get 列出各种kubernetes对象的基本信息, e.g., kubectl get nodes kubectl describe node xxx 查看更详细的信息
为kubectl创建别名 alias k=kubectl , tab命令补全
pod: 一组紧密相关的容器，运行在同一个工作节点上，同一个linux命名空间内
不能用kubectl get 列出单个容器，因为它们不是独立的k8s对象，但是可以列出pod，kubectl get pods
调度scheduling：将pod分配给一个节点
kubectl expose re kubia &amp;ndash;type=LoadBalancer &amp;ndash;name kubia-http 创建外部的负载均衡，可以通过负载均衡的公共ip访问pod
kubia-http服务：解决不断变化的pod IP地址的问题
ReplicationController：负责pod并让它们保持运行
第三章：pod: 运行于Kubernetes中的容器 介绍pod
一个pod不会跨越多个工作节点
想象一个由多个进程组成的应用程序，由于不能将多个进程聚集在一个单独的容器中（很难确定每个进程分别记录了什么），我们需要用pod将容器绑定在一起，作为一个单元进行管理
Kubernetes 通过配置Docker 来让一个pod 内的所有容器共享相同的Linux 命名空间、网络、IPC（进程间通信）命名空间，可以通过IPC进行通信。也可以共享PID命名空间。
同一pod 中的容器运行的多个进程需要注意不能绑定到相同的端口号（共享network命名空间），否则会导致端口冲突。
容器可以通过localhost与同一pod中的其他容器进行通信。
每个pod都可以通过其他pod 的IP 地址来实现相互访问，它们之间没有NAT (网络地址转换） 网关，不管是不是在不同的server上。
这个平面网络是由额外的软件基于真实链路实现的。
通过pod合理管理容器
我们应该将应用程序组织到多个pod 中， 而每个pod 只包含紧密相关的组件或进程。
多层应用分担到多个pod中，提高基础架构的利用率 pod是扩缩容的基本单位，不同组件有不同的扩缩容要求</description>
    </item>
    
    <item>
      <title>Linux1</title>
      <link>http://example.org/docs/stage1/linux1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/linux1/</guid>
      <description>第零章 计算机基础 操作系统是连接硬件和用户的，让用户不用对着机器文档编程，更方便 操作系统用来有效率地控制计算机的硬件资源，并且提供方便程序员编程的接口
第一章 Linux是什么 网路基础： http://www.study-area.org/network/network.htm
在Linux系统中， 每个设备都被当成一个文件来对待
第二章 主机规划与磁盘分区 第三章 安装一个Linux系统 简单翻过去了
第四章 首次登陆与线上求助 man指令学到了很多小技巧，比如/search 一些数字的含义 如果忘记指令了怎么办？ man后面的一些后缀 nano Tmux 使用教程 - 阮一峰的网络日志 (ruanyifeng.com) vimtutor
Vim 配置入门 - 阮一峰的网络日志 (ruanyifeng.com)
第五章 Linux文件权限与目录配置 各种权限查看和更改 ls -l chgrp, chown, chmod 各种权限是什么含义，尤其是目录文件的 注意目录的x权限 绝对目录、相对目录
第六章 Linux文件与目录管理 .和..和~ PATH rmdir 删除空目录 rm-r 删除不空的目录 mv除了移动文件，也可以用作文件的更名 管线|：前一个指令输出的讯息，通过管线交给后续的指令继续使用 eg：cat -n /etc/man_db.conf | head -n 20 | tail -n 10 分号；：在一行中输入多个指令 touch 创建新的空文件，修改 /atime（access读取时间）和mtime（modify修改时间），不能修改ctime（status time） 查阅文件内容 cat, less, more, tail, head 默认权限 umask 文件 666 默认没有x（不可执行） 目录 777 默认有x（可以进入目录） 特殊权限 SUID、SGID、SBIT 4 SUID：使用者执行这一程序时，执行过程中会暂时拥有程序拥有者的权限，例如：passwd修改自己的密码 2 SGID：使用者在这个目录下新建的文件的群组都会和该目录的群组名称相同 小组作业，小组内部成员可以同一个目录底下工作，但是小组成员还是拥有自己的家目录和私有群组，那么可以新建小组群组并将小组成员添加到这个群组，新建小组任务文件夹，然后将该文件夹权限设置为2770（13章任务二例题） 1 SBIT：该目录下使用者创建的文件只有自己与root能够删除 chattr和lsattr设置观察隐藏属性 which查指令 whereis查文件很快，后面要接文件的完整名字 locate查文件也很快，并且后面不需要接完整的名字，但是因为查的是数据库里的数据，所以有时候需要updatedb来更新数据库 updatedb执行比较慢 find 很万能 find [PATH] [option] e.</description>
    </item>
    
    <item>
      <title>Linux2</title>
      <link>http://example.org/docs/stage2/linux2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/linux2/</guid>
      <description>第二章：基础网络概念 什么是网络 制定标准 计算机网络的组成组件 节点node：有网络地址（IP）的设备 服务器主机server：提供数据以响应给用户的主机 工作站workstation：可以在计算机网络输入的设备 客户端client：主动发起联机去要求数据的工作站是客户端 网络卡network interface card：提供网络联机功能；一般node都有&amp;gt;=1 个网络卡 网络接口：主要功能是提供网络地址（IP） 网络形态或拓扑typology：节点在网络上的链接方式，例如星型等 网关route或通讯闸gateway 计算机网络的区域范围 局域网 LAN 广域网 WAN 计算机网络协议 open system interconnection OSI 七层协议 越接近硬件的阶层为底层（layer 1），越接近应用程序的越高层（layer 7） 就像一个套一个的包裹，包裹表面是表头header，包裹里面是实际数据 TCP/IP 协议 将七层协议简化为四层
TCP/IP 链结层相关协议 广域网的设备 局域网使用的设备：以太网络（Ethernet） 以太网络网卡之间的数据传输：CSMA/CD 标准 （Carrier Sense Multiple Access with Collision Detection） 监听 多点传输 碰撞侦测 讯框frame，MAC MAC就是讯框，因为上面有目标与来源的网卡卡号，所以简称网卡卡号是MAC MAC (Media Access Control) 上面有以太网络卡卡号（hardware address，硬件地址），是十六进制的6字节数据 使用ifconfig来查询网卡卡号 资料里大小限制 46-1500bytes 要碰撞侦测，数据量至少64bytes，扣除地址什么的是46bytes，如果不足的话系统会自动填上填充码 MTU, maximum transmission unit，最大传输单位，默认1500，最大9000 改大一些可以减少封包数据的拆解，进而提升网络利用率，但是不是所有的网络媒体都支持大的MTU，可能会导致封包无效，所以不建议改大 集线器hub、交换机switch 区别：交换机克服了封包碰撞的问题，不是网络共享媒体（就像hub那样的十字路口） TCP/IP 网络层相关封包和数据 IP封包 TTL存活时间、Protocol封包协议、来源和目标地址 IP地址 32bits，分成四小段，每段8bits，对应一个0-255的十进制数字 网段等级</description>
    </item>
    
    <item>
      <title>Make File</title>
      <link>http://example.org/docs/stage1/make_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/make_file/</guid>
      <description>概述 makefile关系到了整个系统的编译规则，哪些文件需要先编译，哪些后编译等等 自动化编译 Makefile的规则
如果prerequisites后面的文件比target文件新，就执行command 执行：make 一层层地找文件的依赖关系，直到最终编译出第一个目标文件 变量 $(obj) 自动推导 make看到.o文件会自动把.c文件加在依赖关系prerequisites中 clean make clean 才会执行 放在文件的最后</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>http://example.org/docs/stage1/tmux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/tmux/</guid>
      <description>将会话（还有内部的进程）与窗口解绑的工具
几个名词：
session 会话，理解成任务 window 窗口，当前呈现在面前的终端界面就是窗口 pane 窗格，把窗口切割成一小块一小块 一个会话可以有多个窗口，一个窗口可以又可以分隔成多个窗格 还允许多人实时共享对话
会话session操作
新建会话：tmux new -s 分离会话：tmux detach / ctrl+b d 查看所有会话：tmux ls 接入会话：tmux attach -t tmux attach -t 0 会话编号 杀死会话： tmux kill-session -t 会话编号/ 切换会话：tmux switch -t 会话编号/ 重命名会话：tmux rename-session -t 会话编号/session-name 快捷键 ctrl+b d 分离会话 ctrl+b s 列出所有会话 ctrl+b $ 重命名当前会话 查看session历史输出信息: 进入指定会话后，按ctrl+b，松开后按[，就可以进入历史输出信息查看模式，按q退出 窗格pane操作
划分窗格(pane) tmux split-window [-h] 移动光标 tmux select-pane -U/D/L/R 快捷键
窗口操作
新建窗口 tmux new-window -n 切换窗口 tmux select -window -t &amp;lt;name/number&amp;gt; 重命名窗口 tmux rename-window 快捷键</description>
    </item>
    
    <item>
      <title>Udemy</title>
      <link>http://example.org/docs/stage2/udemy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/udemy/</guid>
      <description>Section 1: 持续集成和Jenkins介绍
持续集成 在开发过程中尽早地发现bug 持续集成、持续交付、持续部署的区别
持续集成：个人研发的部分向软件整体的部分交付。频繁进行集成可以更快地发现其中的问题 持续交付：将集成后的代码交付到类生产环境中 持续部署：自动部署到生产环境中 2. Jenkins介绍 Jenkins是持续集成和构建服务器 Java写的，开源的 Section 2: 环境配置和Jenkins安装 java version：1.8.0 （Java 8）
Jenkins version: 2.121.3，这个版本很多plugin用不了了，所以改用2.346.1
Section 3: Jenkins架构、术语、UI介绍、创建第一个Jenkins Job Master和Slave架构
master改成main了
关键术语 Job/Project: 由Jenkins监视或控制的任务 Slave/Node: node是所有的机器，包括slave和master slave agent：jenkins在slave上运行一个单独的程序 slave注册到master之后，master开始向slave分配负载 Executor: 独立的构建流，一个node可以有&amp;gt;=1个executor Build: 一个build是一个job/project的结果 Plugin: 拓展核心jenkins服务核心功能的软件 Jenkins UI manage plugin报错怎么办
创建第一个Jenkins Job 运行第一个Jenkins Job 注意manage Jenkins -&amp;gt; manage plugin →advanced 中的HTTP Proxy Configuration
enter image description here
Section 4: 用Jenkins持续集成 安装Jenkins GitHub plugin 第一个基于maven的Jenkins项目 Maven 什么是maven 描述软件是如何构建的 描述项目的依赖 安装的时候注意设置PATH Maven中的pom.</description>
    </item>
    
  </channel>
</rss>
